#main  
print("reading")
#image = get_image()
print("end reading")
# print("reading1")
# image = get_image()
# print("end reading1")

image = cv2.imread("cercle1.png")
start_coor, img_start, res_start1,res_start2 = detect_start(image)
target_coor, img_target, res_target = detect_target(img_start)
gray2, contours, hierarchy = detect_obstacle(img_target)

print("contours")
print(contours)

print("start coord")
print(start_coor)
print(target_coor)


# Converting the original image to black and white

# Bilateral Filtering 
bilateral = cv2.bilateralFilter(image,9,75,75)

bw_img = cv2.cvtColor(bilateral, cv2.COLOR_BGR2GRAY)



#plt.figure(1)
# th3 = cv2.adaptiveThreshold(bw_img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,101,4)
# plt.title("threshold gauss")
#plt.imshow(contours)


# plt.figure(2)
# plt.title("bilateral + color")
# plt.imshow(bw_img)

# plt.figure(3)
# th2 = cv2.adaptiveThreshold(bw_img,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,11,2)   #le mieux
# plt.title("threshold mean")
# plt.imshow(th2)

# plt.figure(4)
# ret,th1 = cv2.threshold(bw_img,165, 220,cv2.THRESH_BINARY)
# plt.title("thresh binary")
# plt.imshow(th1)
#print start goal #########################

fig, (ax1, ax2, ax3)  = plt.subplots(1, 3,sharey='row')
ax1.imshow(image)
ax2.imshow(img_target)
ax3.imshow(gray2)




plt.title("image, start, target")
plt.show()

print("end")